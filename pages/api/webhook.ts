import { NextApiRequest, NextApiResponse } from 'next';
import { getConfig } from '@/lib/config';

const config = getConfig();

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(200).json({ ok: true });
  }

  try {
    const { message } = req.body;
    
    if (message && message.text) {
      const chatId = message.chat.id;
      const text = message.text;

      let responseText = '';
      let replyMarkup = {};

      if (text === '/start') {
        responseText = `üß¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è —Ç–µ–ª–æ–º–µ—Ä!

–£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏.

üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;
        
        replyMarkup = {
          inline_keyboard: [[
            {
              text: "üß¨ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
              web_app: { url: `https://${req.headers.host}` }
            }
          ]]
        };
      } 
      else if (text === '/help') {
        responseText = `‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É —Ç–µ–ª–æ–º–µ—Ä:

üß¨ **–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ–ª–æ–º–µ—Ä—ã?**
–¢–µ–ª–æ–º–µ—Ä—ã - —ç—Ç–æ "–∑–∞—â–∏—Ç–Ω—ã–µ –∫–æ–ª–ø–∞—á–∫–∏" –Ω–∞ –∫–æ–Ω—Ü–∞—Ö —Ö—Ä–æ–º–æ—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ç–∞—Ä–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫.

ü•ó **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø—Ä–æ–¥—É–∫—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ —Ç–µ–ª–æ–º–µ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏.

üì± **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üß¨ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ª–æ–º–µ—Ä" –≤ –º–µ–Ω—é
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏
3. –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã
4. –°–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

üí° **–ù–∞—É—á–Ω–∞—è –æ—Å–Ω–æ–≤–∞:**
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –≤–ª–∏—è–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Ç–µ–ª–æ–º–µ—Ä—ã.`;
      }

      if (responseText) {
        await fetch(`https://api.telegram.org/bot${config.telegramToken}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: chatId,
            text: responseText,
            parse_mode: 'Markdown',
            reply_markup: replyMarkup
          })
        });
      }
    }

    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(200).json({ ok: true });
  }
}

'use client';

import React, { useState } from 'react';
import FoodCard from '@/components/FoodCard';
import { showHapticFeedback } from '@/lib/telegram';

const FoodCardDemo = () => {
  const [selectedFoods, setSelectedFoods] = useState<string[]>([]);

  const handleAddFood = (foodName: string) => {
    setSelectedFoods(prev => [...prev, foodName]);
    showHapticFeedback('success');
  };

  // –î–µ–º–æ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const demoFoods = [
    {
      name: '–ü–æ–Ω—á–∏–∫ –≥–ª–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
      telomerePoints: -15,
      calories: 450,
      mechanism: '–¢—Ä–∞–Ω—Å–∂–∏—Ä—ã –∏ —Å–∞—Ö–∞—Ä —Å–æ–∑–¥–∞—é—Ç –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—É—é —Å—Ä–µ–¥—É, —É—Å–∫–æ—Ä—è—é—â—É—é —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Ç–µ–ª–æ–º–µ—Ä'
    },
    {
      name: '–ß–µ—Ä–Ω–∏–∫–∞ —Å–≤–µ–∂–∞—è',
      telomerePoints: 18,
      calories: 57,
      mechanism: '–ê–Ω—Ç–æ—Ü–∏–∞–Ω—ã - –º–æ—â–Ω—ã–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ —Ç–µ–ª–æ–º–µ—Ä –æ—Ç –æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞'
    },
    {
      name: '–õ–æ—Å–æ—Å—å –Ω–∞ –ø–∞—Ä—É',
      telomerePoints: 22,
      calories: 208,
      weight: 150,
      mechanism: '–û–º–µ–≥–∞-3 –∫–∏—Å–ª–æ—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç —Ç–µ–ª–æ–º–µ—Ä–∞–∑—É –∏ –∑–∞—â–∏—â–∞—é—Ç –î–ù–ö –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π'
    },
    {
      name: '–†–∏—Å –±–µ–ª—ã–π',
      telomerePoints: 0,
      calories: 130,
      mechanism: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ç–µ–ª–æ–º–µ—Ä—ã, –ø—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –±–µ–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞'
    },
    {
      name: '–í–æ–¥–∫–∞ 50–º–ª',
      telomerePoints: -18,
      calories: 115,
      weight: 50,
      mechanism: '–í—ã—Å–æ–∫–∏–µ –¥–æ–∑—ã —ç—Ç–∞–Ω–æ–ª–∞ —Ç–æ–∫—Å–∏—á–Ω—ã –¥–ª—è —Ç–µ–ª–æ–º–µ—Ä –∏ —É—Å–∫–æ—Ä—è—é—Ç –∫–ª–µ—Ç–æ—á–Ω–æ–µ —Å—Ç–∞—Ä–µ–Ω–∏–µ'
    },
    {
      name: '–ê–≤–æ–∫–∞–¥–æ –ø–æ–ª–æ–≤–∏–Ω–∫–∞',
      telomerePoints: 10,
      calories: 160,
      weight: 100,
      mechanism: '–ú–æ–Ω–æ–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã —Å–Ω–∏–∂–∞—é—Ç –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–µ—Ç–æ–∫'
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold text-white mb-4 text-glow">
          üéÆ FOOD RPG CARDS
        </h1>
        <p className="text-purple-200 text-lg">
          –ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç - —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è!
        </p>
        <div className="bg-purple-500/20 backdrop-blur-sm rounded-lg p-3 mt-4 max-w-2xl mx-auto">
          <p className="text-purple-100 text-sm">
            ‚ö° –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã! –ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç—ã = —É—Ä–æ–Ω, –∑–µ–ª–µ–Ω—ã–µ = –∏—Å—Ü–µ–ª–µ–Ω–∏–µ
          </p>
        </div>
      </div>

      {/* –°—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
      {selectedFoods.length > 0 && (
        <div className="text-center mb-6">
          <div className="bg-blue-500/20 backdrop-blur-sm rounded-lg p-3 max-w-md mx-auto">
            <h3 className="text-white font-bold mb-2">üõ°Ô∏è –í—ã–±—Ä–∞–Ω–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π: {selectedFoods.length}</h3>
            <div className="text-blue-200 text-sm">
              {selectedFoods.join(', ')}
            </div>
            <button 
              onClick={() => setSelectedFoods([])}
              className="mt-2 bg-red-500/50 hover:bg-red-500/70 text-white px-3 py-1 rounded text-xs"
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl mx-auto">
        {demoFoods.map((food, index) => (
          <FoodCard
            key={index}
            name={food.name}
            telomerePoints={food.telomerePoints}
            calories={food.calories}
            weight={food.weight}
            mechanism={food.mechanism}
            onAdd={() => handleAddFood(food.name)}
            showCompensation={food.telomerePoints < 0}
          />
        ))}
      </div>

      {/* –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã */}
      <div className="mt-12 max-w-4xl mx-auto">
        <div className="bg-black/40 backdrop-blur-sm rounded-xl p-6 border border-purple-500/30">
          <h2 className="text-2xl font-bold text-white mb-4 text-center">
            üß¨ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞
          </h2>
          <div className="grid md:grid-cols-3 gap-4 text-center">
            <div className="bg-red-500/20 rounded-lg p-4">
              <div className="text-3xl mb-2">üíÄ</div>
              <h3 className="text-red-300 font-bold mb-2">–£–†–û–ù</h3>
              <p className="text-red-200 text-sm">
                –í—Ä–µ–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ–∫—Ä–∞—â–∞—é—Ç –∂–∏–∑–Ω—å. –ü–æ–∫–∞–∑–∞–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è.
              </p>
            </div>
            <div className="bg-green-500/20 rounded-lg p-4">
              <div className="text-3xl mb-2">üõ°Ô∏è</div>
              <h3 className="text-green-300 font-bold mb-2">–ó–ê–©–ò–¢–ê</h3>
              <p className="text-green-200 text-sm">
                –ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–¥–ª–µ–≤–∞—é—Ç –∂–∏–∑–Ω—å –∏ –∑–∞—â–∏—â–∞—é—Ç –∫–ª–µ—Ç–∫–∏.
              </p>
            </div>
            <div className="bg-gray-500/20 rounded-lg p-4">
              <div className="text-3xl mb-2">‚öñÔ∏è</div>
              <h3 className="text-gray-300 font-bold mb-2">–ù–ï–ô–¢–†–ê–õ–¨–ù–û</h3>
              <p className="text-gray-200 text-sm">
                –ü—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FoodCardDemo;
